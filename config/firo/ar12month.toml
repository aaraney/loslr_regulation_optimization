[experimentalDesign]
releaseFunction = "flowANN"   # release function script name
septemberRule = "off"               # september rule: on, off
limitType = "onlyPhysicalLimits"                   # flow limits script name
stlawRouting = "stlaw"              # st. lawrence routing script name
slonValues = "True"                 # slon vs ottawa river flows
forecastLeadTime = "12month"        # forecast lead-time: 12month, 6month, 3month, 1month
forecastSkill = "sqLM"              # forecast skill: 12-month status quo AR(1) [sqAR], linear model [sqLM], perfect [0]
trace = "1900_2020"                  # trace to simulate

[optimizationParameters]
numDV = 91                      # number of decision variables
numObj = 7                      # number of objectives
numCon = 0                      # number of constraints
nfe = 75000                     # number of function evaluations
popSize = 100                   # initial population size
metFreq = 100                   # frequency of function evaluations to report metrics

[decisionVariables]
dvName = [
    'M1N1',
    'M2N1',
    'M3N1',
    'M4N1',
    'M1N2',
    'M2N2',
    'M3N2',
    'M4N2',
    'M1N3',
    'M2N3',
    'M3N3',
    'M4N3',
    'M1N4',
    'M2N4',
    'M3N4',
    'M4N4',
    'M1N5',
    'M2N5',
    'M3N5',
    'M4N5',
    'M1N6',
    'M2N6',
    'M3N6',
    'M4N6',
    'M1N7',
    'M2N7',
    'M3N7',
    'M4N7',
    'M1N8',
    'M2N8',
    'M3N8',
    'M4N8',
    'M1N9',
    'M2N9',
    'M3N9',
    'M4N9',
    'M1N10',
    'M2N10',
    'M3N10',
    'M4N10',
    'M1N11',
    'M2N11',
    'M3N11',
    'M4N11',
    'M1N12',
    'M2N12',
    'M3N12',
    'M4N12',
    'M1N13',
    'M2N13',
    'M3N13',
    'M4N13',
    'M1N14',
    'M2N14',
    'M3N14',
    'M4N14',
    'M1N15',
    'M2N15',
    'M3N15',
    'M4N15',
    'N1B',
    'N2B',
    'N3B',
    'N4B',
    'N5B',
    'N6B',
    'N7B',
    'N8B',
    'N9B',
    'N10B',
    'N11B',
    'N12B',
    'N13B',
    'N14B',
    'N15B',
    'N1O1',
    'N2O1',
    'N3O1',
    'N4O1',
    'N5O1',
    'N6O1',
    'N7O1',
    'N8O1',
    'N9O1',
    'N10O1',
    'N11O1',
    'N12O1',
    'N13O1',
    'N14O1',
    'N15O1',
    'O1B',
]
lowerBounds = [-10,
-10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10,
 -10]
upperBounds = [10,
10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10,
 10]
normalized = "False"
# normalizedRange = [0, 0]

[releaseFunction]
nNeurons = 15
nInputs = 4
nTimeInputs = 2
nOutputs = 1
inputVars = ["forNTS", "ontLevelBOQ", "QM"]

normalizedVars = ["forNTS", "ontLevelBOQ"]
minValRange = [4000, 70]
maxValRange = [10000, 80]
minNormRange = [-1, -1]
maxNormRange = [1, 1]

outputVars = ["rfFlow"]
outputRange = [300, 1200]

[performanceIndicators]
objectiveFunction = "objectiveFunctions"
metricWeighting = 'netAnnualAverage'
piName = [
    "Coastal Impacts: Upstream Buildings Impacted (#)",
    "Coastal Impacts: Downstream Buildings Impacted (#)",
    "Commercial Navigation: Ontario + Seaway + Montreal Transportation Costs ($)",
    "Hydropower: Moses-Saunders + Niagara Energy Value ($)",
    "Meadow Marsh: Area (ha)",
    "Muskrat Lodge Viability (%)",
    "Recreational Boating: Impact Costs ($)",
]
epsilonValue = [1500.0, 150.0, 1.0e6, 112.0e6, 500.0, 5.0, 1.0e6]
direction = ["min", "min", "min", "max", "max", "max", "min"]
